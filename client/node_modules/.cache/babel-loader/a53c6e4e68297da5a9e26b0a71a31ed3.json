{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Commander Jordan\\\\springs-delta\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // Bootstrap CSS\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // Bootstrap Bundle JS\n\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport './custom.scss';\nimport { BrowserRouter } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport Loading from './components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // initiate loading state for loading the page\n  const [loading, setLoading] = React.useState(true); // initiate hotspringdata as an array\n\n  const [allHotSpringData, setAllHotSpringData] = React.useState(); // initiate  HotSpring data object, which will be used to store the api data into a more\n  // managable object/state\n\n  let [HotSpringDataObject, setHotSpringDataObject] = React.useState([{\n    id: null,\n    name: '',\n    image: ''\n  }, {\n    id: null,\n    name: '',\n    image: ''\n  }, {\n    id: null,\n    name: '',\n    image: ''\n  }, {\n    id: null,\n    name: '',\n    image: ''\n  }, {\n    id: null,\n    name: '',\n    // lat: '',\n    // long: '',\n    // description: '',\n    // state: '',\n    // area: '',\n    // googleLink: '',\n    image: '' // dayUseFee: '',\n    // overnightFacilities: '',\n    // open: '',\n    // roadAccess: '',\n    // website: '',\n    // resort: '',\n    // loc:{},\n    // nospacename: ''\n\n  }]);\n  let [allHotSpringNames, setAllHotSpringNames] = React.useState([]);\n\n  const fetchHotSpring = async () => {\n    try {\n      // here we use promise all to promise the entire array rawHotSpringAPIData\n      // set the state AllHotSpringData using the function\n      const allHotSpringData = await fetch('http://localhost:5000/hotspringdbinfo').then(res => res.json());\n      setAllHotSpringData([allHotSpringData]);\n      console.log(typeof allHotSpringData);\n      const allHotSpringDataNames = allHotSpringData.map((thing, index) => ({\n        id: index,\n        name: thing.name\n      }));\n      setAllHotSpringNames(allHotSpringDataNames); // turn off loading compnenet\n\n      setLoading(false); // console.log(allHotSpringData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  React.useEffect(() => {\n    fetchHotSpring(); // .then(getRandomHotSpringInfo())\n  }, []); //   loading true, make loading comp run\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 10\n    }, this);\n  }\n\n  console.log(allHotSpringData);\n\n  function getRandomHotSpringInfo() {\n    let randomHotSpring = allHotSpringData[Math.floor(Math.random() * allHotSpringData.length)];\n    setHotSpringDataObject(prevSpringInfo => (({ ...prevSpringInfo,\n      image: randomHotSpring.image,\n      id: randomHotSpring.id\n    }), { ...prevSpringInfo,\n      image: randomHotSpring.image,\n      id: randomHotSpring.id\n    }, { ...prevSpringInfo,\n      image: randomHotSpring.image,\n      id: randomHotSpring.id\n    }, { ...prevSpringInfo,\n      image: randomHotSpring.image,\n      id: randomHotSpring.id\n    }, { ...prevSpringInfo,\n      image: randomHotSpring.image,\n      id: randomHotSpring.id\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"boxed\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"jO338qF8CfUgjQn2G2QmqMOe51Y=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Navbar","Footer","Home","Loading","App","loading","setLoading","useState","allHotSpringData","setAllHotSpringData","HotSpringDataObject","setHotSpringDataObject","id","name","image","allHotSpringNames","setAllHotSpringNames","fetchHotSpring","fetch","then","res","json","console","log","allHotSpringDataNames","map","thing","index","error","useEffect","getRandomHotSpringInfo","randomHotSpring","Math","floor","random","length","prevSpringInfo"],"sources":["C:/Users/Commander Jordan/springs-delta/client/src/App.js"],"sourcesContent":["import React from \"react\"\n// Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// Bootstrap Bundle JS\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\nimport './custom.scss';\nimport { BrowserRouter} from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport Loading from './components/Loading'\n\n\nexport default function App() {\n\n      // initiate loading state for loading the page\n      const [loading, setLoading] = React.useState(true);\n\n      // initiate hotspringdata as an array\n      const [allHotSpringData, setAllHotSpringData] = React.useState();\n\n      // initiate  HotSpring data object, which will be used to store the api data into a more\n      // managable object/state\n      let[HotSpringDataObject, setHotSpringDataObject] = React.useState([\n        {\n        id: null,\n        name: '',\n        image: ''\n    },\n        {\n        id: null,\n        name: '',\n        image: ''\n    },\n        {\n        id: null,\n        name: '',\n        image: ''\n    },\n        {\n        id: null,\n        name: '',\n        image: ''\n    },\n        {\n        id: null,\n        name: '',\n        // lat: '',\n        // long: '',\n        // description: '',\n        // state: '',\n        // area: '',\n        // googleLink: '',\n        image: '',\n        // dayUseFee: '',\n        // overnightFacilities: '',\n        // open: '',\n        // roadAccess: '',\n        // website: '',\n        // resort: '',\n        // loc:{},\n        // nospacename: ''\n    },\n  ])\n\n    let [allHotSpringNames, setAllHotSpringNames] = React.useState([])\n\n\n\n    const fetchHotSpring = async () => {\n      try{\n          // here we use promise all to promise the entire array rawHotSpringAPIData\n          // set the state AllHotSpringData using the function\n          const allHotSpringData = await (\n              fetch('http://localhost:5000/hotspringdbinfo').then((res) => res.json()))           \n              \n\n          setAllHotSpringData([allHotSpringData])\n          console.log(typeof allHotSpringData);\n          const allHotSpringDataNames = \n          allHotSpringData.map((thing, index) => ({ id: index, name: thing.name}))                           \n              setAllHotSpringNames(allHotSpringDataNames); \n          // turn off loading compnenet\n          setLoading(false);\n          // console.log(allHotSpringData);\n      }   catch (error) {\n          console.log(error);\n      }\n      \n  }\n\n  React.useEffect(() => {\n      fetchHotSpring()\n      // .then(getRandomHotSpringInfo())\n    }, []);\n  //   loading true, make loading comp run\n  if (loading) {\n  return <Loading />;\n  }\n  \n  console.log(allHotSpringData);\n\n  function getRandomHotSpringInfo(){\n    let randomHotSpring = allHotSpringData[Math.floor(Math.random()*allHotSpringData.length)]\n    setHotSpringDataObject(prevSpringInfo => (\n      {\n        ...prevSpringInfo, \n        image: randomHotSpring.image, \n        id: randomHotSpring.id,\n    },\n      {\n        ...prevSpringInfo, \n        image: randomHotSpring.image, \n        id: randomHotSpring.id,\n    },\n      {\n        ...prevSpringInfo, \n        image: randomHotSpring.image, \n        id: randomHotSpring.id,\n    },\n      {\n        ...prevSpringInfo, \n        image: randomHotSpring.image, \n        id: randomHotSpring.id,\n    },\n      {\n        ...prevSpringInfo, \n        image: randomHotSpring.image, \n        id: randomHotSpring.id,\n    }\n    ))\n  }\n\n\n\n  return (\n    \n    <BrowserRouter>\n\n    \n    <body className=\"boxed\">\n    <div className=\"body\">\n      \n      <Navbar/>\n      <Home />\n      <Footer />\n      \n    </div>\n    </body>\n\n    </BrowserRouter>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}